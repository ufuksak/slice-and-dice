/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/login": {
    post: operations["postSaveRepo"];
  };
  "/auth/logout": {
    post: operations["postLogout"];
  };
  "/auth/update": {
    put: operations["updateUser"];
  };
  "/auth/statistics": {
    get: operations["getSalaries"];
  };
  "/auth/users": {
    get: operations["getUsers"];
  };
  "/auth/register": {
    post: operations["postSaveRepo"];
    delete: operations["deleteUserByName"];
  };
}

export interface components {
  schemas: {
    UserResponse: {
      accessToken?: string;
      refreshToken?: string;
    };
    UserList: components["schemas"]["UserEntity"][];
    UserEntity: {
      name?: string;
      displayName?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      bio?: string | null;
      avatar?: string | null;
      phone?: string | null;
      country?: string | null;
      password?: string | null;
      salary?: string | null;
      currency?: string | null;
      department?: string | null;
      on_contract?: string | null;
      sub_department?: string | null;
      addresses?: components["schemas"]["AddressItem"][];
      privileges?: components["schemas"]["PrivilegeItem"][];
    };
    AddressItem: {
      line1?: string;
      city?: string;
    };
    PrivilegeItem: {
      entity?: string;
      read?: boolean;
      create?: boolean;
      update?: boolean;
      delete?: boolean;
      admin?: boolean;
    };
    UserToken: {
      refreshToken?: string;
    };
    SalaryResponse: {
      department_name?: string;
      averageSalary?: number;
      minSalary?: number;
      maxSalary?: number;
    };
    ApiError: {
      /**
       * @description A short, summary of the problem type. Written in english and readable for engineers.
       * @example Service Unavailable
       */
      message?: string;
      /**
       * @description Error code. Can be used for translation.
       * @example error.resource.not-found
       */
      code?: string;
      /** @description The target of the error. */
      target?: string;
      /**
       * @description List of failed swagger validations.
       * @example [
       *   {
       *     "target": ".body.name",
       *     "message": "should match pattern \"^([a-zA-Z])([a-zA-Z]|\\d|\\ )*$\"",
       *     "code": "pattern.openapi.validation"
       *   },
       *   {
       *     "target": ".body.logo",
       *     "message": "should match format \"uuid\"",
       *     "code": "format.openapi.validation"
       *   }
       * ]
       */
      details?: components["schemas"]["ApiError"][];
    };
  };
  responses: {
    /** The specified resource was not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["ApiError"];
      };
    };
    /** Unauthorized */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["ApiError"];
      };
    };
    /** Request entity too large */
    RequestEntityTooLarge: {
      content: {
        "application/json": components["schemas"]["ApiError"];
      };
    };
    /** Expectation failed */
    ExpectationFailed: {
      content: {
        "application/json": components["schemas"]["ApiError"];
      };
    };
    /** Internal server error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["ApiError"];
      };
    };
    /** Service not available */
    ServiceUnavailable: {
      content: {
        "application/json": components["schemas"]["ApiError"];
      };
    };
    /** Bad request */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ApiError"];
      };
    };
    /** Old Version received from Client */
    Conflict: {
      content: {
        "application/json": components["schemas"]["ApiError"];
      };
    };
    /** Precondition Failed */
    PreconditionFailed: {
      content: {
        "application/json": components["schemas"]["ApiError"];
      };
    };
  };
}

export interface operations {
  postSaveRepo: {
    responses: {
      /** User has been successfully created */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      500: components["responses"]["InternalServerError"];
    };
    /** save repo selections */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserList"];
      };
    };
  };
  postLogout: {
    responses: {
      /** User has been successfully logged out */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "application/json": {
            /** Format: uuid */
            id: string;
            revision?: string;
          };
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      500: components["responses"]["InternalServerError"];
    };
    /** logout */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserToken"];
      };
    };
  };
  updateUser: {
    responses: {
      /** User has been successfully created */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "application/json": {
            /** Format: uuid */
            id: string;
            revision?: string;
          };
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      500: components["responses"]["InternalServerError"];
    };
    /** update the user profile */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserEntity"];
      };
    };
  };
  getSalaries: {
    parameters: {
      query: {
        /** contract type */
        contract?: string;
        /** department group */
        department?: string;
        /** department group */
        subDepartment?: string;
      };
    };
    responses: {
      /** A list of salaries */
      200: {
        content: {
          "application/json": components["schemas"]["SalaryResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      412: components["responses"]["PreconditionFailed"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getUsers: {
    responses: {
      /** A list of users */
      200: {
        content: {
          "application/json": components["schemas"]["UserList"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Unauthorized"];
      412: components["responses"]["PreconditionFailed"];
      500: components["responses"]["InternalServerError"];
    };
  };
  deleteUserByName: {
    responses: {
      /** User deleted */
      204: {
        headers: {
          ETag?: string;
        };
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
    /** delete users */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserList"];
      };
    };
  };
}

export interface external {}
